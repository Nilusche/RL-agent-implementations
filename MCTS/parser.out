Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BFS
    BLOCK
    COMMENT
    GOAL
    GT
    GTE
    LT
    LTE
    PICK
    POSTCOND
    REWARD
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> symbol_defs fluent_defs action_defs procedure_defs functions
Rule 2     symbol_defs -> symbol_def symbol_defs
Rule 3     symbol_defs -> symbol_def
Rule 4     symbol_defs -> empty
Rule 5     symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI
Rule 6     symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI
Rule 7     id_list -> ID COMMA id_list
Rule 8     id_list -> ID
Rule 9     fluent_defs -> fluent_def fluent_defs
Rule 10    fluent_defs -> fluent_def
Rule 11    fluent_defs -> empty
Rule 12    fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE
Rule 13    initial_values -> INITIAL LBRACE fluent_values RBRACE
Rule 14    fluent_values -> LPAREN ID RPAREN EQ ID SEMI fluent_values
Rule 15    fluent_values -> LPAREN ID RPAREN EQ ID SEMI
Rule 16    action_defs -> action_def action_defs
Rule 17    action_defs -> action_def
Rule 18    action_defs -> empty
Rule 19    action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE
Rule 20    precondition -> PRECONDITION COLON condition
Rule 21    condition -> condition AND condition
Rule 22    condition -> condition OR condition
Rule 23    condition -> NOT condition
Rule 24    condition -> EXISTS LPAREN ID ID RPAREN condition
Rule 25    condition -> ID NEQ ID
Rule 26    condition -> ID EQ ID
Rule 27    effect -> EFFECT COLON effect_action SEMI
Rule 28    effect_action -> ID LPAREN ID RPAREN EQ ID
Rule 29    procedure_defs -> procedure_def procedure_defs
Rule 30    procedure_defs -> procedure_def
Rule 31    procedure_defs -> empty
Rule 32    procedure_def -> PROCEDURE ID LBRACE procedure_body RBRACE
Rule 33    procedure_body -> statement procedure_body
Rule 34    procedure_body -> statement
Rule 35    statement -> action_call
Rule 36    statement -> mcts_call
Rule 37    action_call -> ID LPAREN ID COMMA ID RPAREN SEMI
Rule 38    mcts_call -> MCTS LPAREN NUMBER COMMA ID RPAREN SEMI
Rule 39    functions -> bool_function number_function
Rule 40    bool_function -> BOOL_FUNCTION ID EQ condition SEMI
Rule 41    number_function -> NUMBER_FUNCTION ID EQ reward_function SEMI
Rule 42    reward_function -> IF LPAREN condition RPAREN NUMBER ELSE NUMBER
Rule 43    empty -> <empty>

Terminals, with rules where they appear

ACTION               : 19
AND                  : 21
BFS                  : 
BLOCK                : 
BOOL_FUNCTION        : 40
COLON                : 20 27
COMMA                : 7 19 37 38
COMMENT              : 
DOMAIN               : 5 6
EFFECT               : 27
ELSE                 : 42
EQ                   : 5 6 14 15 26 28 40 41
EXISTS               : 24
FLUENT               : 12
GOAL                 : 
GT                   : 
GTE                  : 
ID                   : 5 6 6 7 8 12 14 14 15 15 19 19 19 24 24 25 25 26 26 28 28 28 32 37 37 37 38 40 41
IF                   : 42
INITIAL              : 13
LBRACE               : 5 6 12 13 19 32
LOC                  : 12
LOCATION             : 12
LPAREN               : 12 14 15 19 24 28 37 38 42
LT                   : 
LTE                  : 
MCTS                 : 38
NEQ                  : 25
NOT                  : 23
NUMBER               : 38 42 42
NUMBER_FUNCTION      : 41
OR                   : 6 22
PICK                 : 
POSTCOND             : 
PRECONDITION         : 20
PROCEDURE            : 32
RBRACE               : 5 6 12 13 19 32
REWARD               : 
RPAREN               : 12 14 15 19 24 28 37 38 42
SEMI                 : 5 6 14 15 27 37 38 40 41
SYMBOL               : 5 6
WHILE                : 
error                : 

Nonterminals, with rules where they appear

action_call          : 35
action_def           : 16 17
action_defs          : 1 16
bool_function        : 39
condition            : 20 21 21 22 22 23 24 40 42
effect               : 19
effect_action        : 27
empty                : 4 11 18 31
fluent_def           : 9 10
fluent_defs          : 1 9
fluent_values        : 13 14
functions            : 1
id_list              : 5 6 7
initial_values       : 12
mcts_call            : 36
number_function      : 39
precondition         : 19
procedure_body       : 32 33
procedure_def        : 29 30
procedure_defs       : 1 29
program              : 0
reward_function      : 41
statement            : 33 34
symbol_def           : 2 3
symbol_defs          : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . symbol_defs fluent_defs action_defs procedure_defs functions
    (2) symbol_defs -> . symbol_def symbol_defs
    (3) symbol_defs -> . symbol_def
    (4) symbol_defs -> . empty
    (5) symbol_def -> . SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI
    (6) symbol_def -> . SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI
    (43) empty -> .

    SYMBOL          shift and go to state 5
    LOCATION        reduce using rule 43 (empty -> .)
    ACTION          reduce using rule 43 (empty -> .)
    PROCEDURE       reduce using rule 43 (empty -> .)
    BOOL_FUNCTION   reduce using rule 43 (empty -> .)

    program                        shift and go to state 1
    symbol_defs                    shift and go to state 2
    symbol_def                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> symbol_defs . fluent_defs action_defs procedure_defs functions
    (9) fluent_defs -> . fluent_def fluent_defs
    (10) fluent_defs -> . fluent_def
    (11) fluent_defs -> . empty
    (12) fluent_def -> . LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE
    (43) empty -> .

    LOCATION        shift and go to state 9
    ACTION          reduce using rule 43 (empty -> .)
    PROCEDURE       reduce using rule 43 (empty -> .)
    BOOL_FUNCTION   reduce using rule 43 (empty -> .)

    fluent_defs                    shift and go to state 6
    fluent_def                     shift and go to state 7
    empty                          shift and go to state 8

state 3

    (2) symbol_defs -> symbol_def . symbol_defs
    (3) symbol_defs -> symbol_def .
    (2) symbol_defs -> . symbol_def symbol_defs
    (3) symbol_defs -> . symbol_def
    (4) symbol_defs -> . empty
    (5) symbol_def -> . SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI
    (6) symbol_def -> . SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI
    (43) empty -> .

  ! reduce/reduce conflict for LOCATION resolved using rule 3 (symbol_defs -> symbol_def .)
  ! reduce/reduce conflict for ACTION resolved using rule 3 (symbol_defs -> symbol_def .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 3 (symbol_defs -> symbol_def .)
  ! reduce/reduce conflict for BOOL_FUNCTION resolved using rule 3 (symbol_defs -> symbol_def .)
    LOCATION        reduce using rule 3 (symbol_defs -> symbol_def .)
    ACTION          reduce using rule 3 (symbol_defs -> symbol_def .)
    PROCEDURE       reduce using rule 3 (symbol_defs -> symbol_def .)
    BOOL_FUNCTION   reduce using rule 3 (symbol_defs -> symbol_def .)
    SYMBOL          shift and go to state 5

  ! LOCATION        [ reduce using rule 43 (empty -> .) ]
  ! ACTION          [ reduce using rule 43 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 43 (empty -> .) ]
  ! BOOL_FUNCTION   [ reduce using rule 43 (empty -> .) ]

    symbol_def                     shift and go to state 3
    symbol_defs                    shift and go to state 10
    empty                          shift and go to state 4

state 4

    (4) symbol_defs -> empty .

    LOCATION        reduce using rule 4 (symbol_defs -> empty .)
    ACTION          reduce using rule 4 (symbol_defs -> empty .)
    PROCEDURE       reduce using rule 4 (symbol_defs -> empty .)
    BOOL_FUNCTION   reduce using rule 4 (symbol_defs -> empty .)


state 5

    (5) symbol_def -> SYMBOL . DOMAIN ID EQ LBRACE id_list RBRACE SEMI
    (6) symbol_def -> SYMBOL . DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI

    DOMAIN          shift and go to state 11


state 6

    (1) program -> symbol_defs fluent_defs . action_defs procedure_defs functions
    (16) action_defs -> . action_def action_defs
    (17) action_defs -> . action_def
    (18) action_defs -> . empty
    (19) action_def -> . ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE
    (43) empty -> .

    ACTION          shift and go to state 15
    PROCEDURE       reduce using rule 43 (empty -> .)
    BOOL_FUNCTION   reduce using rule 43 (empty -> .)

    action_defs                    shift and go to state 12
    action_def                     shift and go to state 13
    empty                          shift and go to state 14

state 7

    (9) fluent_defs -> fluent_def . fluent_defs
    (10) fluent_defs -> fluent_def .
    (9) fluent_defs -> . fluent_def fluent_defs
    (10) fluent_defs -> . fluent_def
    (11) fluent_defs -> . empty
    (12) fluent_def -> . LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE
    (43) empty -> .

  ! reduce/reduce conflict for ACTION resolved using rule 10 (fluent_defs -> fluent_def .)
  ! reduce/reduce conflict for PROCEDURE resolved using rule 10 (fluent_defs -> fluent_def .)
  ! reduce/reduce conflict for BOOL_FUNCTION resolved using rule 10 (fluent_defs -> fluent_def .)
    ACTION          reduce using rule 10 (fluent_defs -> fluent_def .)
    PROCEDURE       reduce using rule 10 (fluent_defs -> fluent_def .)
    BOOL_FUNCTION   reduce using rule 10 (fluent_defs -> fluent_def .)
    LOCATION        shift and go to state 9

  ! ACTION          [ reduce using rule 43 (empty -> .) ]
  ! PROCEDURE       [ reduce using rule 43 (empty -> .) ]
  ! BOOL_FUNCTION   [ reduce using rule 43 (empty -> .) ]

    fluent_def                     shift and go to state 7
    fluent_defs                    shift and go to state 16
    empty                          shift and go to state 8

state 8

    (11) fluent_defs -> empty .

    ACTION          reduce using rule 11 (fluent_defs -> empty .)
    PROCEDURE       reduce using rule 11 (fluent_defs -> empty .)
    BOOL_FUNCTION   reduce using rule 11 (fluent_defs -> empty .)


state 9

    (12) fluent_def -> LOCATION . FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE

    FLUENT          shift and go to state 17


state 10

    (2) symbol_defs -> symbol_def symbol_defs .

    LOCATION        reduce using rule 2 (symbol_defs -> symbol_def symbol_defs .)
    ACTION          reduce using rule 2 (symbol_defs -> symbol_def symbol_defs .)
    PROCEDURE       reduce using rule 2 (symbol_defs -> symbol_def symbol_defs .)
    BOOL_FUNCTION   reduce using rule 2 (symbol_defs -> symbol_def symbol_defs .)


state 11

    (5) symbol_def -> SYMBOL DOMAIN . ID EQ LBRACE id_list RBRACE SEMI
    (6) symbol_def -> SYMBOL DOMAIN . ID EQ ID OR LBRACE id_list RBRACE SEMI

    ID              shift and go to state 18


state 12

    (1) program -> symbol_defs fluent_defs action_defs . procedure_defs functions
    (29) procedure_defs -> . procedure_def procedure_defs
    (30) procedure_defs -> . procedure_def
    (31) procedure_defs -> . empty
    (32) procedure_def -> . PROCEDURE ID LBRACE procedure_body RBRACE
    (43) empty -> .

    PROCEDURE       shift and go to state 22
    BOOL_FUNCTION   reduce using rule 43 (empty -> .)

    procedure_defs                 shift and go to state 19
    procedure_def                  shift and go to state 20
    empty                          shift and go to state 21

state 13

    (16) action_defs -> action_def . action_defs
    (17) action_defs -> action_def .
    (16) action_defs -> . action_def action_defs
    (17) action_defs -> . action_def
    (18) action_defs -> . empty
    (19) action_def -> . ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE
    (43) empty -> .

  ! reduce/reduce conflict for PROCEDURE resolved using rule 17 (action_defs -> action_def .)
  ! reduce/reduce conflict for BOOL_FUNCTION resolved using rule 17 (action_defs -> action_def .)
    PROCEDURE       reduce using rule 17 (action_defs -> action_def .)
    BOOL_FUNCTION   reduce using rule 17 (action_defs -> action_def .)
    ACTION          shift and go to state 15

  ! PROCEDURE       [ reduce using rule 43 (empty -> .) ]
  ! BOOL_FUNCTION   [ reduce using rule 43 (empty -> .) ]

    action_def                     shift and go to state 13
    action_defs                    shift and go to state 23
    empty                          shift and go to state 14

state 14

    (18) action_defs -> empty .

    PROCEDURE       reduce using rule 18 (action_defs -> empty .)
    BOOL_FUNCTION   reduce using rule 18 (action_defs -> empty .)


state 15

    (19) action_def -> ACTION . ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE

    ID              shift and go to state 24


state 16

    (9) fluent_defs -> fluent_def fluent_defs .

    ACTION          reduce using rule 9 (fluent_defs -> fluent_def fluent_defs .)
    PROCEDURE       reduce using rule 9 (fluent_defs -> fluent_def fluent_defs .)
    BOOL_FUNCTION   reduce using rule 9 (fluent_defs -> fluent_def fluent_defs .)


state 17

    (12) fluent_def -> LOCATION FLUENT . LOC LPAREN ID RPAREN LBRACE initial_values RBRACE

    LOC             shift and go to state 25


state 18

    (5) symbol_def -> SYMBOL DOMAIN ID . EQ LBRACE id_list RBRACE SEMI
    (6) symbol_def -> SYMBOL DOMAIN ID . EQ ID OR LBRACE id_list RBRACE SEMI

    EQ              shift and go to state 26


state 19

    (1) program -> symbol_defs fluent_defs action_defs procedure_defs . functions
    (39) functions -> . bool_function number_function
    (40) bool_function -> . BOOL_FUNCTION ID EQ condition SEMI

    BOOL_FUNCTION   shift and go to state 29

    functions                      shift and go to state 27
    bool_function                  shift and go to state 28

state 20

    (29) procedure_defs -> procedure_def . procedure_defs
    (30) procedure_defs -> procedure_def .
    (29) procedure_defs -> . procedure_def procedure_defs
    (30) procedure_defs -> . procedure_def
    (31) procedure_defs -> . empty
    (32) procedure_def -> . PROCEDURE ID LBRACE procedure_body RBRACE
    (43) empty -> .

  ! reduce/reduce conflict for BOOL_FUNCTION resolved using rule 30 (procedure_defs -> procedure_def .)
    BOOL_FUNCTION   reduce using rule 30 (procedure_defs -> procedure_def .)
    PROCEDURE       shift and go to state 22

  ! BOOL_FUNCTION   [ reduce using rule 43 (empty -> .) ]

    procedure_def                  shift and go to state 20
    procedure_defs                 shift and go to state 30
    empty                          shift and go to state 21

state 21

    (31) procedure_defs -> empty .

    BOOL_FUNCTION   reduce using rule 31 (procedure_defs -> empty .)


state 22

    (32) procedure_def -> PROCEDURE . ID LBRACE procedure_body RBRACE

    ID              shift and go to state 31


state 23

    (16) action_defs -> action_def action_defs .

    PROCEDURE       reduce using rule 16 (action_defs -> action_def action_defs .)
    BOOL_FUNCTION   reduce using rule 16 (action_defs -> action_def action_defs .)


state 24

    (19) action_def -> ACTION ID . LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE

    LPAREN          shift and go to state 32


state 25

    (12) fluent_def -> LOCATION FLUENT LOC . LPAREN ID RPAREN LBRACE initial_values RBRACE

    LPAREN          shift and go to state 33


state 26

    (5) symbol_def -> SYMBOL DOMAIN ID EQ . LBRACE id_list RBRACE SEMI
    (6) symbol_def -> SYMBOL DOMAIN ID EQ . ID OR LBRACE id_list RBRACE SEMI

    LBRACE          shift and go to state 35
    ID              shift and go to state 34


state 27

    (1) program -> symbol_defs fluent_defs action_defs procedure_defs functions .

    $end            reduce using rule 1 (program -> symbol_defs fluent_defs action_defs procedure_defs functions .)


state 28

    (39) functions -> bool_function . number_function
    (41) number_function -> . NUMBER_FUNCTION ID EQ reward_function SEMI

    NUMBER_FUNCTION shift and go to state 37

    number_function                shift and go to state 36

state 29

    (40) bool_function -> BOOL_FUNCTION . ID EQ condition SEMI

    ID              shift and go to state 38


state 30

    (29) procedure_defs -> procedure_def procedure_defs .

    BOOL_FUNCTION   reduce using rule 29 (procedure_defs -> procedure_def procedure_defs .)


state 31

    (32) procedure_def -> PROCEDURE ID . LBRACE procedure_body RBRACE

    LBRACE          shift and go to state 39


state 32

    (19) action_def -> ACTION ID LPAREN . ID COMMA ID RPAREN LBRACE precondition effect RBRACE

    ID              shift and go to state 40


state 33

    (12) fluent_def -> LOCATION FLUENT LOC LPAREN . ID RPAREN LBRACE initial_values RBRACE

    ID              shift and go to state 41


state 34

    (6) symbol_def -> SYMBOL DOMAIN ID EQ ID . OR LBRACE id_list RBRACE SEMI

    OR              shift and go to state 42


state 35

    (5) symbol_def -> SYMBOL DOMAIN ID EQ LBRACE . id_list RBRACE SEMI
    (7) id_list -> . ID COMMA id_list
    (8) id_list -> . ID

    ID              shift and go to state 43

    id_list                        shift and go to state 44

state 36

    (39) functions -> bool_function number_function .

    $end            reduce using rule 39 (functions -> bool_function number_function .)


state 37

    (41) number_function -> NUMBER_FUNCTION . ID EQ reward_function SEMI

    ID              shift and go to state 45


state 38

    (40) bool_function -> BOOL_FUNCTION ID . EQ condition SEMI

    EQ              shift and go to state 46


state 39

    (32) procedure_def -> PROCEDURE ID LBRACE . procedure_body RBRACE
    (33) procedure_body -> . statement procedure_body
    (34) procedure_body -> . statement
    (35) statement -> . action_call
    (36) statement -> . mcts_call
    (37) action_call -> . ID LPAREN ID COMMA ID RPAREN SEMI
    (38) mcts_call -> . MCTS LPAREN NUMBER COMMA ID RPAREN SEMI

    ID              shift and go to state 47
    MCTS            shift and go to state 52

    procedure_body                 shift and go to state 48
    statement                      shift and go to state 49
    action_call                    shift and go to state 50
    mcts_call                      shift and go to state 51

state 40

    (19) action_def -> ACTION ID LPAREN ID . COMMA ID RPAREN LBRACE precondition effect RBRACE

    COMMA           shift and go to state 53


state 41

    (12) fluent_def -> LOCATION FLUENT LOC LPAREN ID . RPAREN LBRACE initial_values RBRACE

    RPAREN          shift and go to state 54


state 42

    (6) symbol_def -> SYMBOL DOMAIN ID EQ ID OR . LBRACE id_list RBRACE SEMI

    LBRACE          shift and go to state 55


state 43

    (7) id_list -> ID . COMMA id_list
    (8) id_list -> ID .

    COMMA           shift and go to state 56
    RBRACE          reduce using rule 8 (id_list -> ID .)


state 44

    (5) symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list . RBRACE SEMI

    RBRACE          shift and go to state 57


state 45

    (41) number_function -> NUMBER_FUNCTION ID . EQ reward_function SEMI

    EQ              shift and go to state 58


state 46

    (40) bool_function -> BOOL_FUNCTION ID EQ . condition SEMI
    (21) condition -> . condition AND condition
    (22) condition -> . condition OR condition
    (23) condition -> . NOT condition
    (24) condition -> . EXISTS LPAREN ID ID RPAREN condition
    (25) condition -> . ID NEQ ID
    (26) condition -> . ID EQ ID

    NOT             shift and go to state 61
    EXISTS          shift and go to state 62
    ID              shift and go to state 59

    condition                      shift and go to state 60

state 47

    (37) action_call -> ID . LPAREN ID COMMA ID RPAREN SEMI

    LPAREN          shift and go to state 63


state 48

    (32) procedure_def -> PROCEDURE ID LBRACE procedure_body . RBRACE

    RBRACE          shift and go to state 64


state 49

    (33) procedure_body -> statement . procedure_body
    (34) procedure_body -> statement .
    (33) procedure_body -> . statement procedure_body
    (34) procedure_body -> . statement
    (35) statement -> . action_call
    (36) statement -> . mcts_call
    (37) action_call -> . ID LPAREN ID COMMA ID RPAREN SEMI
    (38) mcts_call -> . MCTS LPAREN NUMBER COMMA ID RPAREN SEMI

    RBRACE          reduce using rule 34 (procedure_body -> statement .)
    ID              shift and go to state 47
    MCTS            shift and go to state 52

    statement                      shift and go to state 49
    procedure_body                 shift and go to state 65
    action_call                    shift and go to state 50
    mcts_call                      shift and go to state 51

state 50

    (35) statement -> action_call .

    ID              reduce using rule 35 (statement -> action_call .)
    MCTS            reduce using rule 35 (statement -> action_call .)
    RBRACE          reduce using rule 35 (statement -> action_call .)


state 51

    (36) statement -> mcts_call .

    ID              reduce using rule 36 (statement -> mcts_call .)
    MCTS            reduce using rule 36 (statement -> mcts_call .)
    RBRACE          reduce using rule 36 (statement -> mcts_call .)


state 52

    (38) mcts_call -> MCTS . LPAREN NUMBER COMMA ID RPAREN SEMI

    LPAREN          shift and go to state 66


state 53

    (19) action_def -> ACTION ID LPAREN ID COMMA . ID RPAREN LBRACE precondition effect RBRACE

    ID              shift and go to state 67


state 54

    (12) fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN . LBRACE initial_values RBRACE

    LBRACE          shift and go to state 68


state 55

    (6) symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE . id_list RBRACE SEMI
    (7) id_list -> . ID COMMA id_list
    (8) id_list -> . ID

    ID              shift and go to state 43

    id_list                        shift and go to state 69

state 56

    (7) id_list -> ID COMMA . id_list
    (7) id_list -> . ID COMMA id_list
    (8) id_list -> . ID

    ID              shift and go to state 43

    id_list                        shift and go to state 70

state 57

    (5) symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE . SEMI

    SEMI            shift and go to state 71


state 58

    (41) number_function -> NUMBER_FUNCTION ID EQ . reward_function SEMI
    (42) reward_function -> . IF LPAREN condition RPAREN NUMBER ELSE NUMBER

    IF              shift and go to state 73

    reward_function                shift and go to state 72

state 59

    (25) condition -> ID . NEQ ID
    (26) condition -> ID . EQ ID

    NEQ             shift and go to state 74
    EQ              shift and go to state 75


state 60

    (40) bool_function -> BOOL_FUNCTION ID EQ condition . SEMI
    (21) condition -> condition . AND condition
    (22) condition -> condition . OR condition

    SEMI            shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78


state 61

    (23) condition -> NOT . condition
    (21) condition -> . condition AND condition
    (22) condition -> . condition OR condition
    (23) condition -> . NOT condition
    (24) condition -> . EXISTS LPAREN ID ID RPAREN condition
    (25) condition -> . ID NEQ ID
    (26) condition -> . ID EQ ID

    NOT             shift and go to state 61
    EXISTS          shift and go to state 62
    ID              shift and go to state 59

    condition                      shift and go to state 79

state 62

    (24) condition -> EXISTS . LPAREN ID ID RPAREN condition

    LPAREN          shift and go to state 80


state 63

    (37) action_call -> ID LPAREN . ID COMMA ID RPAREN SEMI

    ID              shift and go to state 81


state 64

    (32) procedure_def -> PROCEDURE ID LBRACE procedure_body RBRACE .

    PROCEDURE       reduce using rule 32 (procedure_def -> PROCEDURE ID LBRACE procedure_body RBRACE .)
    BOOL_FUNCTION   reduce using rule 32 (procedure_def -> PROCEDURE ID LBRACE procedure_body RBRACE .)


state 65

    (33) procedure_body -> statement procedure_body .

    RBRACE          reduce using rule 33 (procedure_body -> statement procedure_body .)


state 66

    (38) mcts_call -> MCTS LPAREN . NUMBER COMMA ID RPAREN SEMI

    NUMBER          shift and go to state 82


state 67

    (19) action_def -> ACTION ID LPAREN ID COMMA ID . RPAREN LBRACE precondition effect RBRACE

    RPAREN          shift and go to state 83


state 68

    (12) fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE . initial_values RBRACE
    (13) initial_values -> . INITIAL LBRACE fluent_values RBRACE

    INITIAL         shift and go to state 85

    initial_values                 shift and go to state 84

state 69

    (6) symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list . RBRACE SEMI

    RBRACE          shift and go to state 86


state 70

    (7) id_list -> ID COMMA id_list .

    RBRACE          reduce using rule 7 (id_list -> ID COMMA id_list .)


state 71

    (5) symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI .

    SYMBOL          reduce using rule 5 (symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI .)
    LOCATION        reduce using rule 5 (symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI .)
    ACTION          reduce using rule 5 (symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI .)
    PROCEDURE       reduce using rule 5 (symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI .)
    BOOL_FUNCTION   reduce using rule 5 (symbol_def -> SYMBOL DOMAIN ID EQ LBRACE id_list RBRACE SEMI .)


state 72

    (41) number_function -> NUMBER_FUNCTION ID EQ reward_function . SEMI

    SEMI            shift and go to state 87


state 73

    (42) reward_function -> IF . LPAREN condition RPAREN NUMBER ELSE NUMBER

    LPAREN          shift and go to state 88


state 74

    (25) condition -> ID NEQ . ID

    ID              shift and go to state 89


state 75

    (26) condition -> ID EQ . ID

    ID              shift and go to state 90


state 76

    (40) bool_function -> BOOL_FUNCTION ID EQ condition SEMI .

    NUMBER_FUNCTION reduce using rule 40 (bool_function -> BOOL_FUNCTION ID EQ condition SEMI .)


state 77

    (21) condition -> condition AND . condition
    (21) condition -> . condition AND condition
    (22) condition -> . condition OR condition
    (23) condition -> . NOT condition
    (24) condition -> . EXISTS LPAREN ID ID RPAREN condition
    (25) condition -> . ID NEQ ID
    (26) condition -> . ID EQ ID

    NOT             shift and go to state 61
    EXISTS          shift and go to state 62
    ID              shift and go to state 59

    condition                      shift and go to state 91

state 78

    (22) condition -> condition OR . condition
    (21) condition -> . condition AND condition
    (22) condition -> . condition OR condition
    (23) condition -> . NOT condition
    (24) condition -> . EXISTS LPAREN ID ID RPAREN condition
    (25) condition -> . ID NEQ ID
    (26) condition -> . ID EQ ID

    NOT             shift and go to state 61
    EXISTS          shift and go to state 62
    ID              shift and go to state 59

    condition                      shift and go to state 92

state 79

    (23) condition -> NOT condition .
    (21) condition -> condition . AND condition
    (22) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 23 (condition -> NOT condition .)
    RPAREN          reduce using rule 23 (condition -> NOT condition .)
    EFFECT          reduce using rule 23 (condition -> NOT condition .)
    AND             shift and go to state 77
    OR              shift and go to state 78

  ! AND             [ reduce using rule 23 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 23 (condition -> NOT condition .) ]


state 80

    (24) condition -> EXISTS LPAREN . ID ID RPAREN condition

    ID              shift and go to state 93


state 81

    (37) action_call -> ID LPAREN ID . COMMA ID RPAREN SEMI

    COMMA           shift and go to state 94


state 82

    (38) mcts_call -> MCTS LPAREN NUMBER . COMMA ID RPAREN SEMI

    COMMA           shift and go to state 95


state 83

    (19) action_def -> ACTION ID LPAREN ID COMMA ID RPAREN . LBRACE precondition effect RBRACE

    LBRACE          shift and go to state 96


state 84

    (12) fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values . RBRACE

    RBRACE          shift and go to state 97


state 85

    (13) initial_values -> INITIAL . LBRACE fluent_values RBRACE

    LBRACE          shift and go to state 98


state 86

    (6) symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE . SEMI

    SEMI            shift and go to state 99


state 87

    (41) number_function -> NUMBER_FUNCTION ID EQ reward_function SEMI .

    $end            reduce using rule 41 (number_function -> NUMBER_FUNCTION ID EQ reward_function SEMI .)


state 88

    (42) reward_function -> IF LPAREN . condition RPAREN NUMBER ELSE NUMBER
    (21) condition -> . condition AND condition
    (22) condition -> . condition OR condition
    (23) condition -> . NOT condition
    (24) condition -> . EXISTS LPAREN ID ID RPAREN condition
    (25) condition -> . ID NEQ ID
    (26) condition -> . ID EQ ID

    NOT             shift and go to state 61
    EXISTS          shift and go to state 62
    ID              shift and go to state 59

    condition                      shift and go to state 100

state 89

    (25) condition -> ID NEQ ID .

    SEMI            reduce using rule 25 (condition -> ID NEQ ID .)
    AND             reduce using rule 25 (condition -> ID NEQ ID .)
    OR              reduce using rule 25 (condition -> ID NEQ ID .)
    RPAREN          reduce using rule 25 (condition -> ID NEQ ID .)
    EFFECT          reduce using rule 25 (condition -> ID NEQ ID .)


state 90

    (26) condition -> ID EQ ID .

    SEMI            reduce using rule 26 (condition -> ID EQ ID .)
    AND             reduce using rule 26 (condition -> ID EQ ID .)
    OR              reduce using rule 26 (condition -> ID EQ ID .)
    RPAREN          reduce using rule 26 (condition -> ID EQ ID .)
    EFFECT          reduce using rule 26 (condition -> ID EQ ID .)


state 91

    (21) condition -> condition AND condition .
    (21) condition -> condition . AND condition
    (22) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 21 (condition -> condition AND condition .)
    RPAREN          reduce using rule 21 (condition -> condition AND condition .)
    EFFECT          reduce using rule 21 (condition -> condition AND condition .)
    AND             shift and go to state 77
    OR              shift and go to state 78

  ! AND             [ reduce using rule 21 (condition -> condition AND condition .) ]
  ! OR              [ reduce using rule 21 (condition -> condition AND condition .) ]


state 92

    (22) condition -> condition OR condition .
    (21) condition -> condition . AND condition
    (22) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 22 (condition -> condition OR condition .)
    RPAREN          reduce using rule 22 (condition -> condition OR condition .)
    EFFECT          reduce using rule 22 (condition -> condition OR condition .)
    AND             shift and go to state 77
    OR              shift and go to state 78

  ! AND             [ reduce using rule 22 (condition -> condition OR condition .) ]
  ! OR              [ reduce using rule 22 (condition -> condition OR condition .) ]


state 93

    (24) condition -> EXISTS LPAREN ID . ID RPAREN condition

    ID              shift and go to state 101


state 94

    (37) action_call -> ID LPAREN ID COMMA . ID RPAREN SEMI

    ID              shift and go to state 102


state 95

    (38) mcts_call -> MCTS LPAREN NUMBER COMMA . ID RPAREN SEMI

    ID              shift and go to state 103


state 96

    (19) action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE . precondition effect RBRACE
    (20) precondition -> . PRECONDITION COLON condition

    PRECONDITION    shift and go to state 105

    precondition                   shift and go to state 104

state 97

    (12) fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE .

    LOCATION        reduce using rule 12 (fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE .)
    ACTION          reduce using rule 12 (fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE .)
    PROCEDURE       reduce using rule 12 (fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE .)
    BOOL_FUNCTION   reduce using rule 12 (fluent_def -> LOCATION FLUENT LOC LPAREN ID RPAREN LBRACE initial_values RBRACE .)


state 98

    (13) initial_values -> INITIAL LBRACE . fluent_values RBRACE
    (14) fluent_values -> . LPAREN ID RPAREN EQ ID SEMI fluent_values
    (15) fluent_values -> . LPAREN ID RPAREN EQ ID SEMI

    LPAREN          shift and go to state 107

    fluent_values                  shift and go to state 106

state 99

    (6) symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI .

    SYMBOL          reduce using rule 6 (symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI .)
    LOCATION        reduce using rule 6 (symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI .)
    ACTION          reduce using rule 6 (symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI .)
    PROCEDURE       reduce using rule 6 (symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI .)
    BOOL_FUNCTION   reduce using rule 6 (symbol_def -> SYMBOL DOMAIN ID EQ ID OR LBRACE id_list RBRACE SEMI .)


state 100

    (42) reward_function -> IF LPAREN condition . RPAREN NUMBER ELSE NUMBER
    (21) condition -> condition . AND condition
    (22) condition -> condition . OR condition

    RPAREN          shift and go to state 108
    AND             shift and go to state 77
    OR              shift and go to state 78


state 101

    (24) condition -> EXISTS LPAREN ID ID . RPAREN condition

    RPAREN          shift and go to state 109


state 102

    (37) action_call -> ID LPAREN ID COMMA ID . RPAREN SEMI

    RPAREN          shift and go to state 110


state 103

    (38) mcts_call -> MCTS LPAREN NUMBER COMMA ID . RPAREN SEMI

    RPAREN          shift and go to state 111


state 104

    (19) action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition . effect RBRACE
    (27) effect -> . EFFECT COLON effect_action SEMI

    EFFECT          shift and go to state 113

    effect                         shift and go to state 112

state 105

    (20) precondition -> PRECONDITION . COLON condition

    COLON           shift and go to state 114


state 106

    (13) initial_values -> INITIAL LBRACE fluent_values . RBRACE

    RBRACE          shift and go to state 115


state 107

    (14) fluent_values -> LPAREN . ID RPAREN EQ ID SEMI fluent_values
    (15) fluent_values -> LPAREN . ID RPAREN EQ ID SEMI

    ID              shift and go to state 116


state 108

    (42) reward_function -> IF LPAREN condition RPAREN . NUMBER ELSE NUMBER

    NUMBER          shift and go to state 117


state 109

    (24) condition -> EXISTS LPAREN ID ID RPAREN . condition
    (21) condition -> . condition AND condition
    (22) condition -> . condition OR condition
    (23) condition -> . NOT condition
    (24) condition -> . EXISTS LPAREN ID ID RPAREN condition
    (25) condition -> . ID NEQ ID
    (26) condition -> . ID EQ ID

    NOT             shift and go to state 61
    EXISTS          shift and go to state 62
    ID              shift and go to state 59

    condition                      shift and go to state 118

state 110

    (37) action_call -> ID LPAREN ID COMMA ID RPAREN . SEMI

    SEMI            shift and go to state 119


state 111

    (38) mcts_call -> MCTS LPAREN NUMBER COMMA ID RPAREN . SEMI

    SEMI            shift and go to state 120


state 112

    (19) action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect . RBRACE

    RBRACE          shift and go to state 121


state 113

    (27) effect -> EFFECT . COLON effect_action SEMI

    COLON           shift and go to state 122


state 114

    (20) precondition -> PRECONDITION COLON . condition
    (21) condition -> . condition AND condition
    (22) condition -> . condition OR condition
    (23) condition -> . NOT condition
    (24) condition -> . EXISTS LPAREN ID ID RPAREN condition
    (25) condition -> . ID NEQ ID
    (26) condition -> . ID EQ ID

    NOT             shift and go to state 61
    EXISTS          shift and go to state 62
    ID              shift and go to state 59

    condition                      shift and go to state 123

state 115

    (13) initial_values -> INITIAL LBRACE fluent_values RBRACE .

    RBRACE          reduce using rule 13 (initial_values -> INITIAL LBRACE fluent_values RBRACE .)


state 116

    (14) fluent_values -> LPAREN ID . RPAREN EQ ID SEMI fluent_values
    (15) fluent_values -> LPAREN ID . RPAREN EQ ID SEMI

    RPAREN          shift and go to state 124


state 117

    (42) reward_function -> IF LPAREN condition RPAREN NUMBER . ELSE NUMBER

    ELSE            shift and go to state 125


state 118

    (24) condition -> EXISTS LPAREN ID ID RPAREN condition .
    (21) condition -> condition . AND condition
    (22) condition -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 24 (condition -> EXISTS LPAREN ID ID RPAREN condition .)
    RPAREN          reduce using rule 24 (condition -> EXISTS LPAREN ID ID RPAREN condition .)
    EFFECT          reduce using rule 24 (condition -> EXISTS LPAREN ID ID RPAREN condition .)
    AND             shift and go to state 77
    OR              shift and go to state 78

  ! AND             [ reduce using rule 24 (condition -> EXISTS LPAREN ID ID RPAREN condition .) ]
  ! OR              [ reduce using rule 24 (condition -> EXISTS LPAREN ID ID RPAREN condition .) ]


state 119

    (37) action_call -> ID LPAREN ID COMMA ID RPAREN SEMI .

    ID              reduce using rule 37 (action_call -> ID LPAREN ID COMMA ID RPAREN SEMI .)
    MCTS            reduce using rule 37 (action_call -> ID LPAREN ID COMMA ID RPAREN SEMI .)
    RBRACE          reduce using rule 37 (action_call -> ID LPAREN ID COMMA ID RPAREN SEMI .)


state 120

    (38) mcts_call -> MCTS LPAREN NUMBER COMMA ID RPAREN SEMI .

    ID              reduce using rule 38 (mcts_call -> MCTS LPAREN NUMBER COMMA ID RPAREN SEMI .)
    MCTS            reduce using rule 38 (mcts_call -> MCTS LPAREN NUMBER COMMA ID RPAREN SEMI .)
    RBRACE          reduce using rule 38 (mcts_call -> MCTS LPAREN NUMBER COMMA ID RPAREN SEMI .)


state 121

    (19) action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE .

    ACTION          reduce using rule 19 (action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE .)
    PROCEDURE       reduce using rule 19 (action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE .)
    BOOL_FUNCTION   reduce using rule 19 (action_def -> ACTION ID LPAREN ID COMMA ID RPAREN LBRACE precondition effect RBRACE .)


state 122

    (27) effect -> EFFECT COLON . effect_action SEMI
    (28) effect_action -> . ID LPAREN ID RPAREN EQ ID

    ID              shift and go to state 127

    effect_action                  shift and go to state 126

state 123

    (20) precondition -> PRECONDITION COLON condition .
    (21) condition -> condition . AND condition
    (22) condition -> condition . OR condition

    EFFECT          reduce using rule 20 (precondition -> PRECONDITION COLON condition .)
    AND             shift and go to state 77
    OR              shift and go to state 78


state 124

    (14) fluent_values -> LPAREN ID RPAREN . EQ ID SEMI fluent_values
    (15) fluent_values -> LPAREN ID RPAREN . EQ ID SEMI

    EQ              shift and go to state 128


state 125

    (42) reward_function -> IF LPAREN condition RPAREN NUMBER ELSE . NUMBER

    NUMBER          shift and go to state 129


state 126

    (27) effect -> EFFECT COLON effect_action . SEMI

    SEMI            shift and go to state 130


state 127

    (28) effect_action -> ID . LPAREN ID RPAREN EQ ID

    LPAREN          shift and go to state 131


state 128

    (14) fluent_values -> LPAREN ID RPAREN EQ . ID SEMI fluent_values
    (15) fluent_values -> LPAREN ID RPAREN EQ . ID SEMI

    ID              shift and go to state 132


state 129

    (42) reward_function -> IF LPAREN condition RPAREN NUMBER ELSE NUMBER .

    SEMI            reduce using rule 42 (reward_function -> IF LPAREN condition RPAREN NUMBER ELSE NUMBER .)


state 130

    (27) effect -> EFFECT COLON effect_action SEMI .

    RBRACE          reduce using rule 27 (effect -> EFFECT COLON effect_action SEMI .)


state 131

    (28) effect_action -> ID LPAREN . ID RPAREN EQ ID

    ID              shift and go to state 133


state 132

    (14) fluent_values -> LPAREN ID RPAREN EQ ID . SEMI fluent_values
    (15) fluent_values -> LPAREN ID RPAREN EQ ID . SEMI

    SEMI            shift and go to state 134


state 133

    (28) effect_action -> ID LPAREN ID . RPAREN EQ ID

    RPAREN          shift and go to state 135


state 134

    (14) fluent_values -> LPAREN ID RPAREN EQ ID SEMI . fluent_values
    (15) fluent_values -> LPAREN ID RPAREN EQ ID SEMI .
    (14) fluent_values -> . LPAREN ID RPAREN EQ ID SEMI fluent_values
    (15) fluent_values -> . LPAREN ID RPAREN EQ ID SEMI

    RBRACE          reduce using rule 15 (fluent_values -> LPAREN ID RPAREN EQ ID SEMI .)
    LPAREN          shift and go to state 107

    fluent_values                  shift and go to state 136

state 135

    (28) effect_action -> ID LPAREN ID RPAREN . EQ ID

    EQ              shift and go to state 137


state 136

    (14) fluent_values -> LPAREN ID RPAREN EQ ID SEMI fluent_values .

    RBRACE          reduce using rule 14 (fluent_values -> LPAREN ID RPAREN EQ ID SEMI fluent_values .)


state 137

    (28) effect_action -> ID LPAREN ID RPAREN EQ . ID

    ID              shift and go to state 138


state 138

    (28) effect_action -> ID LPAREN ID RPAREN EQ ID .

    SEMI            reduce using rule 28 (effect_action -> ID LPAREN ID RPAREN EQ ID .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (symbol_defs -> symbol_def)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 7 resolved using rule (fluent_defs -> fluent_def)
WARNING: rejected rule (empty -> <empty>) in state 7
WARNING: reduce/reduce conflict in state 13 resolved using rule (action_defs -> action_def)
WARNING: rejected rule (empty -> <empty>) in state 13
WARNING: reduce/reduce conflict in state 20 resolved using rule (procedure_defs -> procedure_def)
WARNING: rejected rule (empty -> <empty>) in state 20
